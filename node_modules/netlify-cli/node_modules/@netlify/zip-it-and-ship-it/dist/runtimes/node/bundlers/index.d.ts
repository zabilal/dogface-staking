import type { Message } from '@netlify/esbuild';
import { FunctionConfig } from '../../../config';
import { FeatureFlag, FeatureFlags } from '../../../feature_flags';
import { FunctionSource } from '../../../function';
import { ModuleFormat } from '../utils/module_format';
export declare type NodeBundlerName = 'esbuild' | 'esbuild_zisi' | 'nft' | 'zisi';
declare type BundlerWarning = Message;
declare type CleanupFunction = () => Promise<void>;
declare type NativeNodeModules = Record<string, Record<string, string | undefined>>;
declare type BundleFunction = (args: {
    basePath?: string;
    config: FunctionConfig;
    featureFlags: Record<FeatureFlag, boolean>;
    pluginsModulesPath?: string;
    repositoryRoot?: string;
} & FunctionSource) => Promise<{
    aliases?: Map<string, string>;
    rewrites?: Map<string, string>;
    basePath: string;
    bundlerWarnings?: BundlerWarning[];
    cleanupFunction?: CleanupFunction;
    inputs: string[];
    mainFile: string;
    moduleFormat: ModuleFormat;
    nativeNodeModules?: NativeNodeModules;
    nodeModulesWithDynamicImports?: string[];
    srcFiles: string[];
}>;
declare type GetSrcFilesFunction = (args: {
    basePath?: string;
    config: FunctionConfig;
    featureFlags: FeatureFlags;
    pluginsModulesPath?: string;
    repositoryRoot?: string;
} & FunctionSource) => Promise<string[]>;
interface NodeBundler {
    bundle: BundleFunction;
    getSrcFiles: GetSrcFilesFunction;
}
declare const getBundler: (name: NodeBundlerName) => NodeBundler;
declare const getDefaultBundler: ({ extension, mainFile, featureFlags, }: {
    extension: string;
    mainFile: string;
    featureFlags: FeatureFlags;
}) => Promise<NodeBundlerName>;
export { getBundler, getDefaultBundler };
export type { BundleFunction, GetSrcFilesFunction, NativeNodeModules };
