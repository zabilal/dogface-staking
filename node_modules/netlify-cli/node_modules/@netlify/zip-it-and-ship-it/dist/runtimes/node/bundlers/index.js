"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultBundler = exports.getBundler = void 0;
const detect_es_module_1 = require("../utils/detect_es_module");
const esbuild_1 = __importDefault(require("./esbuild"));
const nft_1 = __importDefault(require("./nft"));
const zisi_1 = __importDefault(require("./zisi"));
const getBundler = (name) => {
    switch (name) {
        case 'esbuild':
        case 'esbuild_zisi':
            return esbuild_1.default;
        case 'nft':
            return nft_1.default;
        case 'zisi':
            return zisi_1.default;
        default:
            throw new Error(`Unsupported Node bundler: ${name}`);
    }
};
exports.getBundler = getBundler;
// We use ZISI as the default bundler, except for certain extensions, for which
// esbuild is the only option.
const getDefaultBundler = async ({ extension, mainFile, featureFlags, }) => {
    const { defaultEsModulesToEsbuild, traceWithNft } = featureFlags;
    if (['.mjs', '.ts'].includes(extension)) {
        return 'esbuild';
    }
    if (traceWithNft) {
        return 'nft';
    }
    if (defaultEsModulesToEsbuild) {
        const isEsModule = await (0, detect_es_module_1.detectEsModule)({ mainFile });
        if (isEsModule) {
            return 'esbuild';
        }
    }
    return 'zisi';
};
exports.getDefaultBundler = getDefaultBundler;
//# sourceMappingURL=index.js.map