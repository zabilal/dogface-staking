{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\"; // log\n\nimport { fetchData } from \"../stakeData/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport let isConnected = false;\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/stakeConfig/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/stakeConfig/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\"\n        });\n\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          }));\n          isConnected = true; // Add listeners start\n\n          ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n          isConnected = false;\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n        isConnected = false;\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n      isConnected = false;\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/Users/kudiuser/Desktop/staking/src/redux/stakeBlockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","isConnected","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","err"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchData } from \"../stakeData/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\nexport let isConnected = false;\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/stakeConfig/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/stakeConfig/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          isConnected = true;\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n          isConnected = false;\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n         isConnected = false;\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n       isConnected = false;\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};"]},"metadata":{},"sourceType":"module"}