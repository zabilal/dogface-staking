{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchDataM = () => {\n  // let approved; \n  return async dispatch => {\n    const configResponse = await fetch(\"/stakeConfig/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    dispatch(fetchDataRequest());\n\n    try {\n      let totalMinted = await store.getState().blockchain.smartContract.methods.totalMinted().call();\n      dispatch(fetchDataSuccess({\n        totalMinted\n      }));\n    } catch (err) {\n      // console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/kudiuser/Desktop/staking/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchDataM","dispatch","configResponse","fetch","headers","Accept","CONFIG","json","totalMinted","getState","blockchain","smartContract","methods","call","err"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAMA,OAAO,MAAME,UAAU,GAAG,MAAM;AAE9B;AACA,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,cAAc,GAAG,MAAMC,KAAK,CAAC,0BAAD,EAA6B;AAC7DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AADoD,KAA7B,CAAlC;AAMA,UAAMC,MAAM,GAAG,MAAMJ,cAAc,CAACK,IAAf,EAArB;AACAN,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIa,WAAW,GAAG,MAAMd,KAAK,CAC1Be,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYJ,WAFZ,GAGrBK,IAHqB,EAAxB;AAKAZ,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfW,QAAAA;AADe,OAAD,CADV,CAAR;AAKD,KAXD,CAWE,OAAOM,GAAP,EAAY;AACZ;AACAb,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GAxBD;AAyBD,CA5BM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nexport const fetchDataM = () => {\n\n  // let approved; \n  return async (dispatch) => {\n    const configResponse = await fetch(\"/stakeConfig/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    dispatch(fetchDataRequest());\n    try {\n      let totalMinted = await store\n        .getState()\n        .blockchain.smartContract.methods.totalMinted()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalMinted\n        })\n      );\n    } catch (err) {\n      // console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}